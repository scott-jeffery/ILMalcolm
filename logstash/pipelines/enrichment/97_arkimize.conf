# Copyright (c) 2024 Battelle Energy Alliance, LLC.  All rights reserved.

# take fields that are already generic (i.e., ECS or whatever) and copy them
# to their Arkime equivalents if applicable

filter {

    if ([source][oui]) {

      # merge source.oui into srcOui array (with a count field)
      mutate { id => "mutate_merge_field_srcOui"
               merge => { "[srcOui]" => "[source][oui]" } }

      # if this is a DHCP log type, copy srcOui to dhcp.oui
      if ([dhcp][mac]) {
        mutate {
          id => "mutate_add_fields_dhcp_oui"
          add_field => { "[dhcp][oui]" => "%{[srcOui]}" }
        }
      }
    }

    if ([destination][oui]) {
      # merge destination.oui into dstOui array (with a count of 1)
      mutate { id => "mutate_merge_field_dstOui"
               merge => { "[dstOui]" => "[destination][oui]" } }
    }

    if ([network][protocol]) {
        mutate { id => "mutate_merge_network_protocol_to_protocol"
                 merge => { "[protocol]" => "[network][protocol]" } }
    }

    if ([related][user]) {
      mutate { id => "mutate_merge_related_user_to_user"
               merge => { "[user]" => "[related][user]" } }
      # TODO: ECS user, see https://www.elastic.co/guide/en/ecs/current/ecs-user.html#_field_reuse_24
      # user field could (should?) be stored elsewhere, perhaps?
      # note that if so, the arkime "user" field may conflict with ECS here
    }

    # this identifies which node the log came from
    if ([beat][name]) {
      mutate { id => "mutate_add_field_beat_name_node"
               add_field => { "[node]" => "%{[beat][name]}" } }
    } else if ([host][name]) {
      mutate { id => "mutate_add_field_host_name_node"
               add_field => { "[node]" => "%{[host][name]}" } }
    } else {
      mutate { id => "mutate_add_field_logstash_node"
               add_field => { "[node]" => "malcolm" } }
    }

}
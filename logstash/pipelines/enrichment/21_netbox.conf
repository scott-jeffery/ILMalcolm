filter {


  ################################################################################################
  # Do enrichment based on NetBox lookups:
  # - source.ip -> source.device and source.segment
  # - destination.ip -> destination.device and destination.segment
  # - source.mac -> source.device
  # - destination.mac -> destination.device
  # Which log types get enriched is based on the LOGSTASH_NETBOX_ENRICHMENT_DATASETS env. variable
  # Other environment variables' names are passed in via ..._env parameters to netbox_enrich.rb

  ruby {
    id => "ruby_determine_netbox_suitability"
    # @logtypes = {"suricata"=>["alert"], "zeek"=>["conn", "known_hosts", "known_services", "notice", "signatures", "software", "weird"]}
    init => "logtypesStr = ENV['LOGSTASH_NETBOX_ENRICHMENT_DATASETS'] || 'suricata.alert,zeek.conn,zeek.known_hosts,zeek.known_services,zeek.notice,zeek.signatures,zeek.software,zeek.weird' ; logtypesArr = logtypesStr.gsub(/\s+/, '').split(','); @logtypes = logtypesArr.group_by { |logtype| logtype.split('.').first }.transform_values { |values| values.map { |v| v.split('.')[1] } }"
    code => "
      provider = event.get('[event][provider]').to_s
      dataset = event.get('[event][dataset]').to_s
      if (@logtypes.is_a?(Hash) &&
          !@logtypes.empty? &&
          (@logtypes.has_key?('all') ||
           (!provider.empty? && !dataset.empty? && @logtypes.has_key?(provider) && @logtypes[provider].is_a?(Array) && @logtypes[provider].include?(dataset))))
      then
        event.set('[@metadata][do_netbox_enrichment]', true)
      end
    "
  }

  if ([@metadata][do_netbox_enrichment]) {
    if ([source][ip]) and
       (([network][direction] == "internal") or ([network][direction] == "outbound")) {
      ruby {
        id => "ruby_netbox_enrich_source_ip_segment"
        path => "/usr/share/logstash/malcolm-ruby/netbox_enrich.rb"
        script_params => {
          "enabled_env" => "NETBOX_ENRICHMENT"
          "verbose_env" => "NETBOX_ENRICHMENT_VERBOSE"
          "source" => "[source][ip]"
          "target" => "[source][segment]"
          "auto_prefix_env" => "NETBOX_AUTO_CREATE_PREFIX"
          "lookup_type" => "ip_prefix"
          "lookup_site_env" => "NETBOX_DEFAULT_SITE"
          "netbox_token_env" => "SUPERUSER_API_TOKEN"
          "cache_size_env" => "NETBOX_CACHE_SIZE"
          "cache_ttl_env" => "NETBOX_CACHE_TTL"
        }
      }
      ruby {
        id => "ruby_netbox_enrich_source_ip_device"
        path => "/usr/share/logstash/malcolm-ruby/netbox_enrich.rb"
        script_params => {
          "enabled_env" => "NETBOX_ENRICHMENT"
          "verbose_env" => "NETBOX_ENRICHMENT_VERBOSE"
          "source" => "[source][ip]"
          "target" => "[source][device]"
          "lookup_type" => "ip_device"
          "lookup_site_env" => "NETBOX_DEFAULT_SITE"
          "lookup_service" => "false"
          "netbox_token_env" => "SUPERUSER_API_TOKEN"
          "cache_size_env" => "NETBOX_CACHE_SIZE"
          "cache_ttl_env" => "NETBOX_CACHE_TTL"
          "autopopulate_env" => "NETBOX_AUTO_POPULATE"
          "default_manuf_env" => "NETBOX_DEFAULT_MANUFACTURER"
          "default_dtype_env" => "NETBOX_DEFAULT_DEVICE_TYPE"
          "default_role_env" => "NETBOX_DEFAULT_ROLE"
          "autopopulate_fuzzy_threshold_env" => "NETBOX_DEFAULT_FUZZY_THRESHOLD"
          "autopopulate_create_manuf_env" => "NETBOX_DEFAULT_AUTOCREATE_MANUFACTURER"
          "source_oui" => "[source][oui]"
          "source_mac" => "[source][mac]"
        }
      }
    }
    if ([destination][ip]) and
       (([network][direction] == "internal") or ([network][direction] == "inbound")) {
      ruby {
        id => "ruby_netbox_enrich_destination_ip_segment"
        path => "/usr/share/logstash/malcolm-ruby/netbox_enrich.rb"
        script_params => {
          "enabled_env" => "NETBOX_ENRICHMENT"
          "verbose_env" => "NETBOX_ENRICHMENT_VERBOSE"
          "source" => "[destination][ip]"
          "target" => "[destination][segment]"
          "auto_prefix_env" => "NETBOX_AUTO_CREATE_PREFIX"
          "lookup_type" => "ip_prefix"
          "lookup_site_env" => "NETBOX_DEFAULT_SITE"
          "netbox_token_env" => "SUPERUSER_API_TOKEN"
          "cache_size_env" => "NETBOX_CACHE_SIZE"
          "cache_ttl_env" => "NETBOX_CACHE_TTL"
        }
      }
      ruby {
        id => "ruby_netbox_enrich_destination_ip_device"
        path => "/usr/share/logstash/malcolm-ruby/netbox_enrich.rb"
        script_params => {
          "enabled_env" => "NETBOX_ENRICHMENT"
          "verbose_env" => "NETBOX_ENRICHMENT_VERBOSE"
          "source" => "[destination][ip]"
          "target" => "[destination][device]"
          "lookup_type" => "ip_device"
          "lookup_site_env" => "NETBOX_DEFAULT_SITE"
          "lookup_service_env" => "NETBOX_ENRICHMENT_LOOKUP_SERVICE"
          "lookup_service_port_source" => "[destination][port]"
          "netbox_token_env" => "SUPERUSER_API_TOKEN"
          "cache_size_env" => "NETBOX_CACHE_SIZE"
          "cache_ttl_env" => "NETBOX_CACHE_TTL"
          "autopopulate_env" => "NETBOX_AUTO_POPULATE"
          "default_manuf_env" => "NETBOX_DEFAULT_MANUFACTURER"
          "default_dtype_env" => "NETBOX_DEFAULT_DEVICE_TYPE"
          "default_role_env" => "NETBOX_DEFAULT_ROLE"
          "autopopulate_fuzzy_threshold_env" => "NETBOX_DEFAULT_FUZZY_THRESHOLD"
          "autopopulate_create_manuf_env" => "NETBOX_DEFAULT_AUTOCREATE_MANUFACTURER"
          "source_oui" => "[destination][oui]"
          "source_mac" => "[destination][mac]"
        }
      }
    }
  }

  # collect site, role, manufacturer and device_type in "related." segment is merged as network.name in 20_enriched_to_ecs.conf
  if ([source][device][site])              { mutate { id => "mutate_merge_source_device_site_related"
                                                       merge => { "[related][site]" => "[source][device][site]" } } }
  if ([destination][device][site])         { mutate { id => "mutate_merge_destination_device_site_related"
                                                      merge => { "[related][site]" => "[destination][device][site]" } } }
  if ([source][segment][site])             { mutate { id => "mutate_merge_source_segment_site_related"
                                                      merge => { "[related][site]" => "[source][segment][site]" } } }
  if ([destination][segment][site])        { mutate { id => "mutate_merge_destination_segment_site_related"
                                                      merge => { "[related][site]" => "[destination][segment][site]" } } }
  if ([source][device][role])              { mutate { id => "mutate_merge_source_device_role_related"
                                                      merge => { "[related][role]" => "[source][device][role]" } } }
  if ([destination][device][role])         { mutate { id => "mutate_merge_destination_device_role_related"
                                                      merge => { "[related][role]" => "[destination][device][role]" } } }
  if ([source][device][manufacturer])      { mutate { id => "mutate_merge_source_device_manufacturer_related"
                                                     merge => { "[related][manufacturer]" => "[source][device][manufacturer]" } } }
  if ([destination][device][manufacturer]) { mutate { id => "mutate_merge_destination_device_manufacturer_related"
                                                      merge => { "[related][manufacturer]" => "[destination][device][manufacturer]" } } }
  if ([source][device][device_type])       { mutate { id => "mutate_merge_source_device_type_related"
                                                      merge => { "[related][device_type]" => "[source][device][device_type]" } } }
  if ([destination][device][device_type])  { mutate { id => "mutate_merge_destination_device_type_related"
                                                      merge => { "[related][device_type]" => "[destination][device][device_type]" } } }
  if ([source][device][service])           { mutate { id => "mutate_merge_source_service_related"
                                                      merge => { "[related][service]" => "[source][device][service]" } } }
  if ([destination][device][service])      { mutate { id => "mutate_merge_destination_service_related"
                                                      merge => { "[related][service]" => "[destination][device][service]" } } }
  if ([source][device][name])              { mutate { id => "mutate_merge_source_device_name_related"
                                                      merge => { "[related][device_name]" => "[source][device][name]" } } }
  if ([destination][device][name])         { mutate { id => "mutate_merge_destination_device_name_related"
                                                      merge => { "[related][device_name]" => "[destination][device][name]" } } }
  if ([source][device][id])                { mutate { id => "mutate_merge_source_device_id_related"
                                                      merge => { "[related][device_id]" => "[source][device][id]" } } }
  if ([destination][device][id])           { mutate { id => "mutate_merge_destination_device_id_related"
                                                      merge => { "[related][device_id]" => "[destination][device][id]" } } }

  # network.name (based on info from [destination][segment][name] and [source][segment][name])
  if ([destination][segment][name]) { mutate { id => "mutate_add_field_ecs_network_name_resp"
                                               merge => { "[network][name]" => "[destination][segment][name]" } } }
  if ([source][segment][name]) { mutate { id => "mutate_add_field_ecs_network_name_orig"
                                          merge => { "[network][name]" => "[source][segment][name]" } } }

} # filter


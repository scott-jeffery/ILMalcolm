# Copyright (c) 2024 Battelle Energy Alliance, LLC.  All rights reserved.

filter {

  if (([message] =~ /^#/) or (![log][file][path])) {
    drop { id => "drop_zeek_invalid_logs" }
  }

  # - Tags may have been specified, like: conn(tagA,tagB,tagC).log, extract the log type (conn) and the tags (tagA,tagB,tagC).
  # - Normalize log types with - in their names to _ (e.g., opcua-binary -> opcua_binary).
  # - Zeek log files might be caught by filebeat right in the middle of being renamed/moved as
  #   part of log rotation (ie., renamed from conn.log to conn.2020-01-16-14-00-00.log or
  #   conn.2020_01_16_14_00_00.log). We don't care about that, ignore the date part and just process
  #   the log source as we normally would.
  ruby {
    id => "ruby_zeek_log_source_extract"
    #                                                                       ↓Type     ↓Tags   ↓Rotate Timestamp (discard)                                        ↓.log (discard)
    code => "
      if fileParts = event.get('[log][file][path]').split('/').last.match(/^(.*?)(?:\((.*)\))?(?:\.\d{4}[_:-]?\d{2}[_:-]?\d{2}[_:-]?\d{2}[_:-]?\d{2}[_:-]?\d{2})?\.log/i) then
        logType, tags  = fileParts.captures
        event.set('[log_source]', logType.gsub('-', '_')) unless logType.nil?
        event.set('[@metadata][zeek_log_tags]', tags) unless tags.nil?
      end"
  }

  # report types we're going to ignore
  if (([log_source] == "analyzer") or
      ([log_source] == "bsap_ip_unknown") or
      ([log_source] == "bsap_serial_unknown") or
      ([log_source] == "ecat_arp_info") or
      ([log_source] == "reporter") or
      ([log_source] == "broker") or
      ([log_source] == "cluster") or
      ([log_source] == "capture_loss") or
      ([log_source] == "communication") or
      ([log_source] == "packet_filter") or
      ([log_source] == "png") or
      ([log_source] == "stats") or
      ([log_source] == "stderr") or
      ([log_source] == "stdout") or
      ([log_source] == "loaded_scripts")) {
    drop { id => "drop_zeek_ignored_source" }
  }

  # remove some tags pulled from the filename we might not want
  if ([@metadata][zeek_log_tags]) {
    ruby {
      id => "ruby_zeek_prune_tags"
      code => "
        filenameTags = event.get('[@metadata][zeek_log_tags]').split(',')
        zeekFieldsTag = filenameTags.select { |str| str.start_with?('ZEEKFLDx') }
        if (zeekFieldsTag.size > 0) then
          zeekFieldsTags = zeekFieldsTag.first.split('x', 3)
          if (zeekFieldsTags.size == 3) then
            event.set('[@metadata][zeek_fields_bitmap_version]', zeekFieldsTags[1].to_i(16))
            event.set('[@metadata][zeek_fields_bitmap]', zeekFieldsTags[2].to_i(16))
          end
        end
        filenameTags.delete_if{|v| ((v == nil) or (v == '') or (v !~ /\D/) or (v =~ /\A\s*(ZEEKFLDx|autocarve)/i) or (v =~ /\A\s*(pcap|dmp|log|bro|zeek|suricata|m?tcpdump|m?netsniff|autozeek|autosuricata)s?\s*\z/i) or (v == event.get('[log_source]')))}
        event.set('[@metadata][zeek_log_tags]', filenameTags.uniq) unless (filenameTags.length == 0)
      "
      #
      #  ZEEKFLDx00x01FFFFFF
      #  |      |  └ bitmap of included fields within field list
      #  |      └ index into zeek-log-field-bitmap.py:ZEEK_LOG_FIELDS list indicating field configuration within differing Zeek versions
      #  └ indicates that the field list has been pre-processed by zeek-process-pcap.py
      #
      # when logstash-filter-dissect gets this implemented, we *may* not have to do this
      #   - see zeek-process-pcap.py for the format of the bitmap number
      #   - https://github.com/logstash-plugins/logstash-filter-dissect/issues/56
      #   - https://github.com/logstash-plugins/logstash-filter-dissect/issues/62
      #
      # todo: right now rather than using the bitmap intelligently to build the field list, I'm just looking for
      # known preconfigurations. look into doing it "smart".
      #
    }
    if ([@metadata][zeek_log_tags]) { mutate { id => "mutate_merge_zeek_log_tags"
                                                  merge => { "[tags]" => "[@metadata][zeek_log_tags]" } } }
  }

} # end Filter

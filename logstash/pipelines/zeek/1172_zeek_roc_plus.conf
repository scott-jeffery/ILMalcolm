filter {

  if ([log_source] == "roc_plus_configurable_opcode") {
    #############################################################################################################################
    # roc_plus_configurable_opcode.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_configurable_opcode"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][table_number]}  %{[zeek_cols][starting_table_location]} %{[zeek_cols][num_table_locations]} %{[zeek_cols][table_version_number]}  %{[zeek_cols][data]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_configurable_opcode"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_configurable_opcode"
          init => "@zeek_roc_plus_configurable_opcode_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'table_number', 'starting_table_location', 'num_table_locations', 'table_version_number', 'data' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_configurable_opcode_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_configurable_opcode"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_data_request") {
    #############################################################################################################################
    # roc_plus_data_request.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_data_request"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][io_data_req]} %{[zeek_cols][io_data]} %{[zeek_cols][history_segment]} %{[zeek_cols][num_points]}  %{[zeek_cols][historical_points]} %{[zeek_cols][periodic_index]}  %{[zeek_cols][tag]} %{[zeek_cols][num_alarms]}  %{[zeek_cols][starting_alarm_log_idx]}  %{[zeek_cols][current_alarm_log_idx]} %{[zeek_cols][alarm_data]}  %{[zeek_cols][num_events_req]}  %{[zeek_cols][starting_event_log_idx]}  %{[zeek_cols][num_events_sent]} %{[zeek_cols][current_event_log_idx]} %{[zeek_cols][event_data]}  %{[zeek_cols][day_requested]} %{[zeek_cols][month_requested]} %{[zeek_cols][starting_periodic_idx]} %{[zeek_cols][num_periodic_entries]}  %{[zeek_cols][daily_index]} %{[zeek_cols][num_daily_entries]} %{[zeek_cols][history_point]} %{[zeek_cols][periodic_values]} %{[zeek_cols][daily_values]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_data_request"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_data_request"
          init => "@zeek_roc_plus_data_request_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'io_data_req', 'io_data', 'history_segment', 'num_points', 'historical_points', 'periodic_index', 'tag', 'num_alarms', 'starting_alarm_log_idx', 'current_alarm_log_idx', 'alarm_data', 'num_events_req', 'starting_event_log_idx', 'num_events_sent', 'current_event_log_idx', 'event_data', 'day_requested', 'month_requested', 'starting_periodic_idx', 'num_periodic_entries', 'daily_index', 'num_daily_entries', 'history_point', 'periodic_values', 'daily_values' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_data_request_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_roc_plus_data_request_commas"
               split => { "[zeek_cols][historical_points]" => ","
                          "[zeek_cols][alarm_data]" => ","
                          "[zeek_cols][event_data]" => ","
                          "[zeek_cols][periodic_values]" => ","
                          "[zeek_cols][daily_values]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_data_request"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_file_transfer") {
    #############################################################################################################################
    # roc_plus_file_transfer.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_file_transfer"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][command]} %{[zeek_cols][open_options]}  %{[zeek_cols][path]}  %{[zeek_cols][filename]}  %{[zeek_cols][file_descriptor]} %{[zeek_cols][offset]}  %{[zeek_cols][file_size]} %{[zeek_cols][num_bytes]} %{[zeek_cols][data]}  %{[zeek_cols][additional_files]}  %{[zeek_cols][total_num_files]} %{[zeek_cols][file_names]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_file_transfer"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_file_transfer"
          init => "@zeek_roc_plus_file_transfer_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'command', 'open_options', 'path', 'filename', 'file_descriptor', 'offset', 'file_size', 'num_bytes', 'data', 'additional_files', 'total_num_files', 'file_names' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_file_transfer_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_roc_plus_file_transfer_commas"
               split => { "[zeek_cols][file_names]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_file_transfer"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_historical_min_max_vals") {
    #############################################################################################################################
    # roc_plus_historical_min_max_vals.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_historical_min_max_vals"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][history_segment]} %{[zeek_cols][historical_point_number]} %{[zeek_cols][historical_archival_method]}  %{[zeek_cols][point_type]}  %{[zeek_cols][point_logic_number]}  %{[zeek_cols][parameter_number]}  %{[zeek_cols][current_value]} %{[zeek_cols][minimum_value_since_contract]}  %{[zeek_cols][maximum_value_since_contract]}  %{[zeek_cols][time_of_min_value_occurrence]}  %{[zeek_cols][time_of_max_value_occurrence]}  %{[zeek_cols][minimum_value_yesterday]} %{[zeek_cols][maximum_value_yesterday]} %{[zeek_cols][time_of_yesterday_min_value]} %{[zeek_cols][time_of_yesterday_max_value]} %{[zeek_cols][value_during_last_completed_period]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_historical_min_max_vals"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_historical_min_max_vals"
          init => "@zeek_roc_plus_historical_min_max_vals_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'history_segment', 'historical_point_number', 'historical_archival_method', 'point_type', 'point_logic_number', 'parameter_number', 'current_value', 'minimum_value_since_contract', 'maximum_value_since_contract', 'time_of_min_value_occurrence', 'time_of_max_value_occurrence', 'minimum_value_yesterday', 'maximum_value_yesterday', 'time_of_yesterday_min_value', 'time_of_yesterday_max_value', 'value_during_last_completed_period' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_historical_min_max_vals_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_historical_min_max_vals"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_history_information") {
    #############################################################################################################################
    # roc_plus_history_information.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_history_information"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][command]} %{[zeek_cols][history_segment]} %{[zeek_cols][history_segment_index]} %{[zeek_cols][current_index]} %{[zeek_cols][type_of_history]} %{[zeek_cols][num_time_periods]}  %{[zeek_cols][request_timestamps]}  %{[zeek_cols][num_points]}  %{[zeek_cols][requested_history_points]}  %{[zeek_cols][num_configured_points]} %{[zeek_cols][configured_points]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_history_information"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_history_information"
          init => "@zeek_roc_plus_history_information_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'command', 'history_segment', 'history_segment_index', 'current_index', 'type_of_history', 'num_time_periods', 'request_timestamps', 'num_points', 'requested_history_points', 'num_configured_points', 'configured_points' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_history_information_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_roc_plus_history_information_commas"
               split => { "[zeek_cols][requested_history_points]" => ","
                          "[zeek_cols][configured_points]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_history_information"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_history_point_data") {
    #############################################################################################################################
    # roc_plus_history_point_data.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_history_point_data"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][history_segment]} %{[zeek_cols][point_number]}  %{[zeek_cols][type_of_history]} %{[zeek_cols][history_segment_index]} %{[zeek_cols][num_values_requested]}  %{[zeek_cols][current_history_segment_index]} %{[zeek_cols][num_values_sent]} %{[zeek_cols][starting_history_point]}  %{[zeek_cols][num_history_points]}  %{[zeek_cols][num_time_periods]}  %{[zeek_cols][num_data_elements_sent]}  %{[zeek_cols][history_timestamps]}  %{[zeek_cols][history_values]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_history_point_data"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_history_point_data"
          init => "@zeek_roc_plus_history_point_data_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'history_segment', 'point_number', 'type_of_history', 'history_segment_index', 'num_values_requested', 'current_history_segment_index', 'num_values_sent', 'starting_history_point', 'num_history_points', 'num_time_periods', 'num_data_elements_sent', 'history_timestamps', 'history_values' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_history_point_data_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_roc_plus_history_point_data_commas"
               split => { "[zeek_cols][history_timestamps]" => ","
                          "[zeek_cols][history_values]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_history_point_data"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus") {
    #############################################################################################################################
    # roc_plus.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_roc_plus_fields"
        rename => { "[zeek_cols][protocol]" => "[zeek_cols][proto]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_roc_plus"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][proto]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][packet_type]} %{[zeek_cols][destination_unit]}  %{[zeek_cols][destination_group]} %{[zeek_cols][source_unit]} %{[zeek_cols][source_group]}  %{[zeek_cols][opcode]}  %{[zeek_cols][data_length]} %{[zeek_cols][lsb_crc]} %{[zeek_cols][msb_crc]} %{[zeek_cols][error_code]}  %{[zeek_cols][error_offset]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus"
          init => "@zeek_roc_plus_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'roc_plus_link_id', 'packet_type', 'destination_unit', 'destination_group', 'source_unit', 'source_group', 'opcode', 'data_length', 'lsb_crc', 'msb_crc', 'error_code', 'error_offset' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_roc_plus_commas"
               split => { "[zeek_cols][error_code]" => ","
                          "[zeek_cols][error_offset]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_login") {
    #############################################################################################################################
    # roc_plus_login.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_login"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][operator_id]} %{[zeek_cols][password]}  %{[zeek_cols][access_level]}  %{[zeek_cols][logout_string]} %{[zeek_cols][session_key_string]}  %{[zeek_cols][wrapped_session_key]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_login"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_login"
          init => "@zeek_roc_plus_login_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'operator_id', 'password', 'access_level', 'logout_string', 'session_key_string', 'wrapped_session_key' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_login_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_login"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_peer_to_peer_network_messages") {
    #############################################################################################################################
    # roc_plus_peer_to_peer_network_messages.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_peer_to_peer_network_messages"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][network_id]}  %{[zeek_cols][commissioned_index_one_based]}  %{[zeek_cols][embedded_roc_opcode]} %{[zeek_cols][embedded_request_length]} %{[zeek_cols][embedded_request_data]} %{[zeek_cols][embedded_response_length]}  %{[zeek_cols][embedded_request_data_response]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_peer_to_peer_network_messages"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_peer_to_peer_network_messages"
          init => "@zeek_roc_plus_peer_to_peer_network_messages_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'network_id', 'commissioned_index_one_based', 'embedded_roc_opcode', 'embedded_request_length', 'embedded_request_data', 'embedded_response_length', 'embedded_request_data_response' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_peer_to_peer_network_messages_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_peer_to_peer_network_messages"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_realtime_clock") {
    #############################################################################################################################
    # roc_plus_realtime_clock.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_realtime_clock"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][current_second]}  %{[zeek_cols][current_minute]}  %{[zeek_cols][current_hour]}  %{[zeek_cols][current_day]} %{[zeek_cols][current_month]} %{[zeek_cols][current_year]}  %{[zeek_cols][current_day_of_week]} %{[zeek_cols][timestamp]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_realtime_clock"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_realtime_clock"
          init => "@zeek_roc_plus_realtime_clock_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'current_second', 'current_minute', 'current_hour', 'current_day', 'current_month', 'current_year', 'current_day_of_week', 'timestamp' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_realtime_clock_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_realtime_clock"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_single_point_parameters") {
    #############################################################################################################################
    # roc_plus_single_point_parameters.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_single_point_parameters"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][point_type]}  %{[zeek_cols][point_logic_number]}  %{[zeek_cols][num_parameters]}  %{[zeek_cols][start_parameter_num]} %{[zeek_cols][parameter_data]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_single_point_parameters"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_single_point_parameters"
          init => "@zeek_roc_plus_single_point_parameters_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'point_type', 'point_logic_number', 'num_parameters', 'start_parameter_num', 'parameter_data' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_single_point_parameters_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_single_point_parameters"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_store_and_forward") {
    #############################################################################################################################
    # roc_plus_store_and_forward.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_store_and_forward"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][host_address]}  %{[zeek_cols][host_group]}  %{[zeek_cols][dest1_address]} %{[zeek_cols][dest1_group]} %{[zeek_cols][dest2_address]} %{[zeek_cols][dest2_group]} %{[zeek_cols][dest3_address]} %{[zeek_cols][dest3_group]} %{[zeek_cols][dest4_address]} %{[zeek_cols][dest4_group]} %{[zeek_cols][desired_opcode]}  %{[zeek_cols][num_data_bytes]}  %{[zeek_cols][opcode_data]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_store_and_forward"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_store_and_forward"
          init => "@zeek_roc_plus_store_and_forward_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'host_address', 'host_group', 'dest1_address', 'dest1_group', 'dest2_address', 'dest2_group', 'dest3_address', 'dest3_group', 'dest4_address', 'dest4_group', 'desired_opcode', 'num_data_bytes', 'opcode_data' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_store_and_forward_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_store_and_forward"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_sys_cfg") {
    #############################################################################################################################
    # roc_plus_sys_cfg.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_sys_cfg"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][system_mode]} %{[zeek_cols][port_number]} %{[zeek_cols][security_access_mode]}  %{[zeek_cols][logical_compatability_status]}  %{[zeek_cols][opcode_revision]} %{[zeek_cols][subtype]} %{[zeek_cols][type_of_roc]} %{[zeek_cols][point_types]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_sys_cfg"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_sys_cfg"
          init => "@zeek_roc_plus_sys_cfg_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'system_mode', 'port_number', 'security_access_mode', 'logical_compatability_status', 'opcode_revision', 'subtype', 'type_of_roc', 'point_types' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_sys_cfg_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_roc_plus_sys_cfg_commas"
               split => { "[zeek_cols][point_types]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_sys_cfg"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_time_period_history_points") {
    #############################################################################################################################
    # roc_plus_time_period_history_points.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_time_period_history_points"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][timestamp_for_index]} %{[zeek_cols][history_point_values]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_time_period_history_points"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_time_period_history_points"
          init => "@zeek_roc_plus_time_period_history_points_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'timestamp_for_index', 'history_point_values' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_time_period_history_points_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_roc_plus_time_period_history_points_commas"
               split => { "[zeek_cols][history_point_values]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_time_period_history_points"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_transaction_history") {
    #############################################################################################################################
    # roc_plus_transaction_history.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_transaction_history"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][command]} %{[zeek_cols][segment]} %{[zeek_cols][transaction_offset]}  %{[zeek_cols][transaction_number]}  %{[zeek_cols][data_offset]} %{[zeek_cols][num_transactions]}  %{[zeek_cols][more_data]} %{[zeek_cols][description]} %{[zeek_cols][payload_size]}  %{[zeek_cols][transaction_num]} %{[zeek_cols][date_created]}  %{[zeek_cols][msg_data_size]} %{[zeek_cols][data_type]} %{[zeek_cols][data]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_transaction_history"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_transaction_history"
          init => "@zeek_roc_plus_transaction_history_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'command', 'segment', 'transaction_offset', 'transaction_number', 'data_offset', 'num_transactions', 'more_data', 'description', 'payload_size', 'transaction_num', 'date_created', 'msg_data_size', 'data_type', 'data' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_transaction_history_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_roc_plus_transaction_history_commas"
               split => { "[zeek_cols][transaction_num]" => ","
                          "[zeek_cols][date_created]" => ","
                          "[zeek_cols][data_type]" => ","
                          "[zeek_cols][data]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_transaction_history"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_unknown_data") {
    #############################################################################################################################
    # roc_plus_unknown_data.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_unknown_data"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][data]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_unknown_data"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_unknown_data"
          init => "@zeek_roc_plus_unknown_data_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'data' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_unknown_data_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_unknown_data"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }


  if ([log_source] == "roc_plus_user_defined_info") {
    #############################################################################################################################
    # roc_plus_user_defined_info.log
    # roc_plus_types.zeek (https://github.com/cisagov/icsnpp-roc-plus)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_roc_plus_user_defined_info"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][roc_plus_link_id]}  %{[zeek_cols][command]} %{[zeek_cols][start_point]} %{[zeek_cols][num_points]}  %{[zeek_cols][point_types]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_roc_plus_user_defined_info"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_roc_plus_user_defined_info"
          init => "@zeek_roc_plus_user_defined_info_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'roc_plus_link_id', 'command', 'start_point', 'num_points', 'point_types' ]"
          code => "event.set('[zeek_cols]', @zeek_roc_plus_user_defined_info_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_roc_plus_user_defined_info_commas"
               split => { "[zeek_cols][point_types]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_roc_plus_user_defined_info"
      add_field => {
        "[zeek_cols][service]" => "roc_plus"
      }
      add_tag => [ "ics" ]
    }
  }

}

